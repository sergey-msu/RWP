#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RWP.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RWP")]
	internal partial class DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttachment(Attachment instance);
    partial void UpdateAttachment(Attachment instance);
    partial void DeleteAttachment(Attachment instance);
    partial void InsertScanRegime(ScanRegime instance);
    partial void UpdateScanRegime(ScanRegime instance);
    partial void DeleteScanRegime(ScanRegime instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertMedicalResearch(MedicalResearch instance);
    partial void UpdateMedicalResearch(MedicalResearch instance);
    partial void DeleteMedicalResearch(MedicalResearch instance);
    partial void InsertMedicalResearchAttachment(MedicalResearchAttachment instance);
    partial void UpdateMedicalResearchAttachment(MedicalResearchAttachment instance);
    partial void DeleteMedicalResearchAttachment(MedicalResearchAttachment instance);
    partial void InsertMedicalResearchScope(MedicalResearchScope instance);
    partial void UpdateMedicalResearchScope(MedicalResearchScope instance);
    partial void DeleteMedicalResearchScope(MedicalResearchScope instance);
    partial void InsertMedicalScanRegime(MedicalScanRegime instance);
    partial void UpdateMedicalScanRegime(MedicalScanRegime instance);
    partial void DeleteMedicalScanRegime(MedicalScanRegime instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertReportSetting(ReportSetting instance);
    partial void UpdateReportSetting(ReportSetting instance);
    partial void DeleteReportSetting(ReportSetting instance);
    partial void InsertResearchScope(ResearchScope instance);
    partial void UpdateResearchScope(ResearchScope instance);
    partial void DeleteResearchScope(ResearchScope instance);
    partial void InsertResearchTemplate(ResearchTemplate instance);
    partial void UpdateResearchTemplate(ResearchTemplate instance);
    partial void DeleteResearchTemplate(ResearchTemplate instance);
    #endregion
		
		public DataContext() : 
				base(global::RWP.Data.Properties.Settings.Default.RWPConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Attachment> Attachments
		{
			get
			{
				return this.GetTable<Attachment>();
			}
		}
		
		public System.Data.Linq.Table<ScanRegime> ScanRegimes
		{
			get
			{
				return this.GetTable<ScanRegime>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<MedicalResearch> MedicalResearches
		{
			get
			{
				return this.GetTable<MedicalResearch>();
			}
		}
		
		public System.Data.Linq.Table<MedicalResearchAttachment> MedicalResearchAttachments
		{
			get
			{
				return this.GetTable<MedicalResearchAttachment>();
			}
		}
		
		public System.Data.Linq.Table<MedicalResearchScope> MedicalResearchScopes
		{
			get
			{
				return this.GetTable<MedicalResearchScope>();
			}
		}
		
		public System.Data.Linq.Table<MedicalScanRegime> MedicalScanRegimes
		{
			get
			{
				return this.GetTable<MedicalScanRegime>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<ReportSetting> ReportSettings
		{
			get
			{
				return this.GetTable<ReportSetting>();
			}
		}
		
		public System.Data.Linq.Table<ResearchScope> ResearchScopes
		{
			get
			{
				return this.GetTable<ResearchScope>();
			}
		}
		
		public System.Data.Linq.Table<ResearchTemplate> ResearchTemplates
		{
			get
			{
				return this.GetTable<ResearchTemplate>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attachment")]
	public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Type;
		
		private string _Note;
		
		private EntitySet<MedicalResearchAttachment> _MedicalResearchAttachments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Attachment()
		{
			this._MedicalResearchAttachments = new EntitySet<MedicalResearchAttachment>(new Action<MedicalResearchAttachment>(this.attach_MedicalResearchAttachments), new Action<MedicalResearchAttachment>(this.detach_MedicalResearchAttachments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attachment_MedicalResearchAttachment", Storage="_MedicalResearchAttachments", ThisKey="Id", OtherKey="IdAttachment")]
		public EntitySet<MedicalResearchAttachment> MedicalResearchAttachments
		{
			get
			{
				return this._MedicalResearchAttachments;
			}
			set
			{
				this._MedicalResearchAttachments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicalResearchAttachments(MedicalResearchAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Attachment = this;
		}
		
		private void detach_MedicalResearchAttachments(MedicalResearchAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Attachment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScanRegime")]
	public partial class ScanRegime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Order;
		
		private bool _IsSystem;
		
		private EntitySet<MedicalScanRegime> _MedicalScanRegimes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    partial void OnIsSystemChanging(bool value);
    partial void OnIsSystemChanged();
    #endregion
		
		public ScanRegime()
		{
			this._MedicalScanRegimes = new EntitySet<MedicalScanRegime>(new Action<MedicalScanRegime>(this.attach_MedicalScanRegimes), new Action<MedicalScanRegime>(this.detach_MedicalScanRegimes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int")]
		public System.Nullable<int> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystem", DbType="Bit NOT NULL")]
		public bool IsSystem
		{
			get
			{
				return this._IsSystem;
			}
			set
			{
				if ((this._IsSystem != value))
				{
					this.OnIsSystemChanging(value);
					this.SendPropertyChanging();
					this._IsSystem = value;
					this.SendPropertyChanged("IsSystem");
					this.OnIsSystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScanRegime_MedicalScanRegime", Storage="_MedicalScanRegimes", ThisKey="Id", OtherKey="IdScanRegime")]
		public EntitySet<MedicalScanRegime> MedicalScanRegimes
		{
			get
			{
				return this._MedicalScanRegimes;
			}
			set
			{
				this._MedicalScanRegimes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicalScanRegimes(MedicalScanRegime entity)
		{
			this.SendPropertyChanging();
			entity.ScanRegime = this;
		}
		
		private void detach_MedicalScanRegimes(MedicalScanRegime entity)
		{
			this.SendPropertyChanging();
			entity.ScanRegime = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Address;
		
		private string _ResearchPlace;
		
		private string _ContactName;
		
		private string _ContactEMail;
		
		private string _Note;
		
		private EntitySet<MedicalResearch> _MedicalResearches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnResearchPlaceChanging(string value);
    partial void OnResearchPlaceChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnContactEMailChanging(string value);
    partial void OnContactEMailChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Customer()
		{
			this._MedicalResearches = new EntitySet<MedicalResearch>(new Action<MedicalResearch>(this.attach_MedicalResearches), new Action<MedicalResearch>(this.detach_MedicalResearches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(450) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResearchPlace", DbType="NVarChar(450)")]
		public string ResearchPlace
		{
			get
			{
				return this._ResearchPlace;
			}
			set
			{
				if ((this._ResearchPlace != value))
				{
					this.OnResearchPlaceChanging(value);
					this.SendPropertyChanging();
					this._ResearchPlace = value;
					this.SendPropertyChanged("ResearchPlace");
					this.OnResearchPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="NVarChar(1024)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactEMail", DbType="NVarChar(1024)")]
		public string ContactEMail
		{
			get
			{
				return this._ContactEMail;
			}
			set
			{
				if ((this._ContactEMail != value))
				{
					this.OnContactEMailChanging(value);
					this.SendPropertyChanging();
					this._ContactEMail = value;
					this.SendPropertyChanged("ContactEMail");
					this.OnContactEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(256)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_MedicalResearch", Storage="_MedicalResearches", ThisKey="Id", OtherKey="IdCustomer")]
		public EntitySet<MedicalResearch> MedicalResearches
		{
			get
			{
				return this._MedicalResearches;
			}
			set
			{
				this._MedicalResearches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicalResearches(MedicalResearch entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_MedicalResearches(MedicalResearch entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _Position;
		
		private System.Data.Linq.Binary _Print;
		
		private string _Note;
		
		private EntitySet<MedicalResearch> _MedicalResearches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnPrintChanging(System.Data.Linq.Binary value);
    partial void OnPrintChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Doctor()
		{
			this._MedicalResearches = new EntitySet<MedicalResearch>(new Action<MedicalResearch>(this.attach_MedicalResearches), new Action<MedicalResearch>(this.detach_MedicalResearches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(128)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Print]", Storage="_Print", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Print
		{
			get
			{
				return this._Print;
			}
			set
			{
				if ((this._Print != value))
				{
					this.OnPrintChanging(value);
					this.SendPropertyChanging();
					this._Print = value;
					this.SendPropertyChanged("Print");
					this.OnPrintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(2048)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_MedicalResearch", Storage="_MedicalResearches", ThisKey="Id", OtherKey="IdDoctor")]
		public EntitySet<MedicalResearch> MedicalResearches
		{
			get
			{
				return this._MedicalResearches;
			}
			set
			{
				this._MedicalResearches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicalResearches(MedicalResearch entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_MedicalResearches(MedicalResearch entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalResearch")]
	public partial class MedicalResearch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdCustomer;
		
		private int _IdDoctor;
		
		private int _IdPatient;
		
		private System.Nullable<int> _IdResearchTemplate;
		
		private System.DateTime _ExaminationDate;
		
		private System.DateTime _ResearchDate;
		
		private string _Number;
		
		private string _SliceThickness;
		
		private bool _UseContrast;
		
		private double _Dose;
		
		private string _Content;
		
		private string _Conclusion;
		
		private EntitySet<MedicalResearchAttachment> _MedicalResearchAttachments;
		
		private EntitySet<MedicalResearchScope> _MedicalResearchScopes;
		
		private EntitySet<MedicalScanRegime> _MedicalScanRegimes;
		
		private EntitySet<ReportSetting> _ReportSettings;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<ResearchTemplate> _ResearchTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdCustomerChanging(int value);
    partial void OnIdCustomerChanged();
    partial void OnIdDoctorChanging(int value);
    partial void OnIdDoctorChanged();
    partial void OnIdPatientChanging(int value);
    partial void OnIdPatientChanged();
    partial void OnIdResearchTemplateChanging(System.Nullable<int> value);
    partial void OnIdResearchTemplateChanged();
    partial void OnExaminationDateChanging(System.DateTime value);
    partial void OnExaminationDateChanged();
    partial void OnResearchDateChanging(System.DateTime value);
    partial void OnResearchDateChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnSliceThicknessChanging(string value);
    partial void OnSliceThicknessChanged();
    partial void OnUseContrastChanging(bool value);
    partial void OnUseContrastChanged();
    partial void OnDoseChanging(double value);
    partial void OnDoseChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnConclusionChanging(string value);
    partial void OnConclusionChanged();
    #endregion
		
		public MedicalResearch()
		{
			this._MedicalResearchAttachments = new EntitySet<MedicalResearchAttachment>(new Action<MedicalResearchAttachment>(this.attach_MedicalResearchAttachments), new Action<MedicalResearchAttachment>(this.detach_MedicalResearchAttachments));
			this._MedicalResearchScopes = new EntitySet<MedicalResearchScope>(new Action<MedicalResearchScope>(this.attach_MedicalResearchScopes), new Action<MedicalResearchScope>(this.detach_MedicalResearchScopes));
			this._MedicalScanRegimes = new EntitySet<MedicalScanRegime>(new Action<MedicalScanRegime>(this.attach_MedicalScanRegimes), new Action<MedicalScanRegime>(this.detach_MedicalScanRegimes));
			this._ReportSettings = new EntitySet<ReportSetting>(new Action<ReportSetting>(this.attach_ReportSettings), new Action<ReportSetting>(this.detach_ReportSettings));
			this._Customer = default(EntityRef<Customer>);
			this._Doctor = default(EntityRef<Doctor>);
			this._Patient = default(EntityRef<Patient>);
			this._ResearchTemplate = default(EntityRef<ResearchTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCustomer", DbType="Int NOT NULL")]
		public int IdCustomer
		{
			get
			{
				return this._IdCustomer;
			}
			set
			{
				if ((this._IdCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCustomerChanging(value);
					this.SendPropertyChanging();
					this._IdCustomer = value;
					this.SendPropertyChanged("IdCustomer");
					this.OnIdCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDoctor", DbType="Int NOT NULL")]
		public int IdDoctor
		{
			get
			{
				return this._IdDoctor;
			}
			set
			{
				if ((this._IdDoctor != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdDoctorChanging(value);
					this.SendPropertyChanging();
					this._IdDoctor = value;
					this.SendPropertyChanged("IdDoctor");
					this.OnIdDoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPatient", DbType="Int NOT NULL")]
		public int IdPatient
		{
			get
			{
				return this._IdPatient;
			}
			set
			{
				if ((this._IdPatient != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPatientChanging(value);
					this.SendPropertyChanging();
					this._IdPatient = value;
					this.SendPropertyChanged("IdPatient");
					this.OnIdPatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdResearchTemplate", DbType="Int")]
		public System.Nullable<int> IdResearchTemplate
		{
			get
			{
				return this._IdResearchTemplate;
			}
			set
			{
				if ((this._IdResearchTemplate != value))
				{
					if (this._ResearchTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdResearchTemplateChanging(value);
					this.SendPropertyChanging();
					this._IdResearchTemplate = value;
					this.SendPropertyChanged("IdResearchTemplate");
					this.OnIdResearchTemplateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaminationDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExaminationDate
		{
			get
			{
				return this._ExaminationDate;
			}
			set
			{
				if ((this._ExaminationDate != value))
				{
					this.OnExaminationDateChanging(value);
					this.SendPropertyChanging();
					this._ExaminationDate = value;
					this.SendPropertyChanged("ExaminationDate");
					this.OnExaminationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResearchDate", DbType="DateTime NOT NULL")]
		public System.DateTime ResearchDate
		{
			get
			{
				return this._ResearchDate;
			}
			set
			{
				if ((this._ResearchDate != value))
				{
					this.OnResearchDateChanging(value);
					this.SendPropertyChanging();
					this._ResearchDate = value;
					this.SendPropertyChanged("ResearchDate");
					this.OnResearchDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SliceThickness", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string SliceThickness
		{
			get
			{
				return this._SliceThickness;
			}
			set
			{
				if ((this._SliceThickness != value))
				{
					this.OnSliceThicknessChanging(value);
					this.SendPropertyChanging();
					this._SliceThickness = value;
					this.SendPropertyChanged("SliceThickness");
					this.OnSliceThicknessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseContrast", DbType="Bit NOT NULL")]
		public bool UseContrast
		{
			get
			{
				return this._UseContrast;
			}
			set
			{
				if ((this._UseContrast != value))
				{
					this.OnUseContrastChanging(value);
					this.SendPropertyChanging();
					this._UseContrast = value;
					this.SendPropertyChanged("UseContrast");
					this.OnUseContrastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dose", DbType="Float NOT NULL")]
		public double Dose
		{
			get
			{
				return this._Dose;
			}
			set
			{
				if ((this._Dose != value))
				{
					this.OnDoseChanging(value);
					this.SendPropertyChanging();
					this._Dose = value;
					this.SendPropertyChanged("Dose");
					this.OnDoseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Conclusion", DbType="NVarChar(2048) NOT NULL", CanBeNull=false)]
		public string Conclusion
		{
			get
			{
				return this._Conclusion;
			}
			set
			{
				if ((this._Conclusion != value))
				{
					this.OnConclusionChanging(value);
					this.SendPropertyChanging();
					this._Conclusion = value;
					this.SendPropertyChanged("Conclusion");
					this.OnConclusionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalResearch_MedicalResearchAttachment", Storage="_MedicalResearchAttachments", ThisKey="Id", OtherKey="IdMedicalResearch")]
		public EntitySet<MedicalResearchAttachment> MedicalResearchAttachments
		{
			get
			{
				return this._MedicalResearchAttachments;
			}
			set
			{
				this._MedicalResearchAttachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalResearch_MedicalResearchScope", Storage="_MedicalResearchScopes", ThisKey="Id", OtherKey="IdMedicalResearch")]
		public EntitySet<MedicalResearchScope> MedicalResearchScopes
		{
			get
			{
				return this._MedicalResearchScopes;
			}
			set
			{
				this._MedicalResearchScopes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalResearch_MedicalScanRegime", Storage="_MedicalScanRegimes", ThisKey="Id", OtherKey="IdMedicalResearch")]
		public EntitySet<MedicalScanRegime> MedicalScanRegimes
		{
			get
			{
				return this._MedicalScanRegimes;
			}
			set
			{
				this._MedicalScanRegimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalResearch_ReportSetting", Storage="_ReportSettings", ThisKey="Id", OtherKey="IdMedicalResearch")]
		public EntitySet<ReportSetting> ReportSettings
		{
			get
			{
				return this._ReportSettings;
			}
			set
			{
				this._ReportSettings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_MedicalResearch", Storage="_Customer", ThisKey="IdCustomer", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.MedicalResearches.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.MedicalResearches.Add(this);
						this._IdCustomer = value.Id;
					}
					else
					{
						this._IdCustomer = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_MedicalResearch", Storage="_Doctor", ThisKey="IdDoctor", OtherKey="Id", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.MedicalResearches.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.MedicalResearches.Add(this);
						this._IdDoctor = value.Id;
					}
					else
					{
						this._IdDoctor = default(int);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_MedicalResearch", Storage="_Patient", ThisKey="IdPatient", OtherKey="Id", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.MedicalResearches.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.MedicalResearches.Add(this);
						this._IdPatient = value.Id;
					}
					else
					{
						this._IdPatient = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResearchTemplate_MedicalResearch", Storage="_ResearchTemplate", ThisKey="IdResearchTemplate", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public ResearchTemplate ResearchTemplate
		{
			get
			{
				return this._ResearchTemplate.Entity;
			}
			set
			{
				ResearchTemplate previousValue = this._ResearchTemplate.Entity;
				if (((previousValue != value) 
							|| (this._ResearchTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResearchTemplate.Entity = null;
						previousValue.MedicalResearches.Remove(this);
					}
					this._ResearchTemplate.Entity = value;
					if ((value != null))
					{
						value.MedicalResearches.Add(this);
						this._IdResearchTemplate = value.Id;
					}
					else
					{
						this._IdResearchTemplate = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResearchTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicalResearchAttachments(MedicalResearchAttachment entity)
		{
			this.SendPropertyChanging();
			entity.MedicalResearch = this;
		}
		
		private void detach_MedicalResearchAttachments(MedicalResearchAttachment entity)
		{
			this.SendPropertyChanging();
			entity.MedicalResearch = null;
		}
		
		private void attach_MedicalResearchScopes(MedicalResearchScope entity)
		{
			this.SendPropertyChanging();
			entity.MedicalResearch = this;
		}
		
		private void detach_MedicalResearchScopes(MedicalResearchScope entity)
		{
			this.SendPropertyChanging();
			entity.MedicalResearch = null;
		}
		
		private void attach_MedicalScanRegimes(MedicalScanRegime entity)
		{
			this.SendPropertyChanging();
			entity.MedicalResearch = this;
		}
		
		private void detach_MedicalScanRegimes(MedicalScanRegime entity)
		{
			this.SendPropertyChanging();
			entity.MedicalResearch = null;
		}
		
		private void attach_ReportSettings(ReportSetting entity)
		{
			this.SendPropertyChanging();
			entity.MedicalResearch = this;
		}
		
		private void detach_ReportSettings(ReportSetting entity)
		{
			this.SendPropertyChanging();
			entity.MedicalResearch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalResearchAttachment")]
	public partial class MedicalResearchAttachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdMedicalResearch;
		
		private int _IdAttachment;
		
		private EntityRef<Attachment> _Attachment;
		
		private EntityRef<MedicalResearch> _MedicalResearch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdMedicalResearchChanging(int value);
    partial void OnIdMedicalResearchChanged();
    partial void OnIdAttachmentChanging(int value);
    partial void OnIdAttachmentChanged();
    #endregion
		
		public MedicalResearchAttachment()
		{
			this._Attachment = default(EntityRef<Attachment>);
			this._MedicalResearch = default(EntityRef<MedicalResearch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMedicalResearch", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdMedicalResearch
		{
			get
			{
				return this._IdMedicalResearch;
			}
			set
			{
				if ((this._IdMedicalResearch != value))
				{
					if (this._MedicalResearch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMedicalResearchChanging(value);
					this.SendPropertyChanging();
					this._IdMedicalResearch = value;
					this.SendPropertyChanged("IdMedicalResearch");
					this.OnIdMedicalResearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAttachment", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdAttachment
		{
			get
			{
				return this._IdAttachment;
			}
			set
			{
				if ((this._IdAttachment != value))
				{
					if (this._Attachment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAttachmentChanging(value);
					this.SendPropertyChanging();
					this._IdAttachment = value;
					this.SendPropertyChanged("IdAttachment");
					this.OnIdAttachmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attachment_MedicalResearchAttachment", Storage="_Attachment", ThisKey="IdAttachment", OtherKey="Id", IsForeignKey=true)]
		public Attachment Attachment
		{
			get
			{
				return this._Attachment.Entity;
			}
			set
			{
				Attachment previousValue = this._Attachment.Entity;
				if (((previousValue != value) 
							|| (this._Attachment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attachment.Entity = null;
						previousValue.MedicalResearchAttachments.Remove(this);
					}
					this._Attachment.Entity = value;
					if ((value != null))
					{
						value.MedicalResearchAttachments.Add(this);
						this._IdAttachment = value.Id;
					}
					else
					{
						this._IdAttachment = default(int);
					}
					this.SendPropertyChanged("Attachment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalResearch_MedicalResearchAttachment", Storage="_MedicalResearch", ThisKey="IdMedicalResearch", OtherKey="Id", IsForeignKey=true)]
		public MedicalResearch MedicalResearch
		{
			get
			{
				return this._MedicalResearch.Entity;
			}
			set
			{
				MedicalResearch previousValue = this._MedicalResearch.Entity;
				if (((previousValue != value) 
							|| (this._MedicalResearch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalResearch.Entity = null;
						previousValue.MedicalResearchAttachments.Remove(this);
					}
					this._MedicalResearch.Entity = value;
					if ((value != null))
					{
						value.MedicalResearchAttachments.Add(this);
						this._IdMedicalResearch = value.Id;
					}
					else
					{
						this._IdMedicalResearch = default(int);
					}
					this.SendPropertyChanged("MedicalResearch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalResearchScope")]
	public partial class MedicalResearchScope : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdMedicalResearch;
		
		private int _IdResearchScope;
		
		private EntityRef<MedicalResearch> _MedicalResearch;
		
		private EntityRef<ResearchScope> _ResearchScope;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdMedicalResearchChanging(int value);
    partial void OnIdMedicalResearchChanged();
    partial void OnIdResearchScopeChanging(int value);
    partial void OnIdResearchScopeChanged();
    #endregion
		
		public MedicalResearchScope()
		{
			this._MedicalResearch = default(EntityRef<MedicalResearch>);
			this._ResearchScope = default(EntityRef<ResearchScope>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMedicalResearch", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdMedicalResearch
		{
			get
			{
				return this._IdMedicalResearch;
			}
			set
			{
				if ((this._IdMedicalResearch != value))
				{
					if (this._MedicalResearch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMedicalResearchChanging(value);
					this.SendPropertyChanging();
					this._IdMedicalResearch = value;
					this.SendPropertyChanged("IdMedicalResearch");
					this.OnIdMedicalResearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdResearchScope", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdResearchScope
		{
			get
			{
				return this._IdResearchScope;
			}
			set
			{
				if ((this._IdResearchScope != value))
				{
					if (this._ResearchScope.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdResearchScopeChanging(value);
					this.SendPropertyChanging();
					this._IdResearchScope = value;
					this.SendPropertyChanged("IdResearchScope");
					this.OnIdResearchScopeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalResearch_MedicalResearchScope", Storage="_MedicalResearch", ThisKey="IdMedicalResearch", OtherKey="Id", IsForeignKey=true)]
		public MedicalResearch MedicalResearch
		{
			get
			{
				return this._MedicalResearch.Entity;
			}
			set
			{
				MedicalResearch previousValue = this._MedicalResearch.Entity;
				if (((previousValue != value) 
							|| (this._MedicalResearch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalResearch.Entity = null;
						previousValue.MedicalResearchScopes.Remove(this);
					}
					this._MedicalResearch.Entity = value;
					if ((value != null))
					{
						value.MedicalResearchScopes.Add(this);
						this._IdMedicalResearch = value.Id;
					}
					else
					{
						this._IdMedicalResearch = default(int);
					}
					this.SendPropertyChanged("MedicalResearch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResearchScope_MedicalResearchScope", Storage="_ResearchScope", ThisKey="IdResearchScope", OtherKey="Id", IsForeignKey=true)]
		public ResearchScope ResearchScope
		{
			get
			{
				return this._ResearchScope.Entity;
			}
			set
			{
				ResearchScope previousValue = this._ResearchScope.Entity;
				if (((previousValue != value) 
							|| (this._ResearchScope.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResearchScope.Entity = null;
						previousValue.MedicalResearchScopes.Remove(this);
					}
					this._ResearchScope.Entity = value;
					if ((value != null))
					{
						value.MedicalResearchScopes.Add(this);
						this._IdResearchScope = value.Id;
					}
					else
					{
						this._IdResearchScope = default(int);
					}
					this.SendPropertyChanged("ResearchScope");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalScanRegime")]
	public partial class MedicalScanRegime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdMedicalResearch;
		
		private int _IdScanRegime;
		
		private EntityRef<MedicalResearch> _MedicalResearch;
		
		private EntityRef<ScanRegime> _ScanRegime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdMedicalResearchChanging(int value);
    partial void OnIdMedicalResearchChanged();
    partial void OnIdScanRegimeChanging(int value);
    partial void OnIdScanRegimeChanged();
    #endregion
		
		public MedicalScanRegime()
		{
			this._MedicalResearch = default(EntityRef<MedicalResearch>);
			this._ScanRegime = default(EntityRef<ScanRegime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMedicalResearch", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdMedicalResearch
		{
			get
			{
				return this._IdMedicalResearch;
			}
			set
			{
				if ((this._IdMedicalResearch != value))
				{
					if (this._MedicalResearch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMedicalResearchChanging(value);
					this.SendPropertyChanging();
					this._IdMedicalResearch = value;
					this.SendPropertyChanged("IdMedicalResearch");
					this.OnIdMedicalResearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdScanRegime", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdScanRegime
		{
			get
			{
				return this._IdScanRegime;
			}
			set
			{
				if ((this._IdScanRegime != value))
				{
					if (this._ScanRegime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdScanRegimeChanging(value);
					this.SendPropertyChanging();
					this._IdScanRegime = value;
					this.SendPropertyChanged("IdScanRegime");
					this.OnIdScanRegimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalResearch_MedicalScanRegime", Storage="_MedicalResearch", ThisKey="IdMedicalResearch", OtherKey="Id", IsForeignKey=true)]
		public MedicalResearch MedicalResearch
		{
			get
			{
				return this._MedicalResearch.Entity;
			}
			set
			{
				MedicalResearch previousValue = this._MedicalResearch.Entity;
				if (((previousValue != value) 
							|| (this._MedicalResearch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalResearch.Entity = null;
						previousValue.MedicalScanRegimes.Remove(this);
					}
					this._MedicalResearch.Entity = value;
					if ((value != null))
					{
						value.MedicalScanRegimes.Add(this);
						this._IdMedicalResearch = value.Id;
					}
					else
					{
						this._IdMedicalResearch = default(int);
					}
					this.SendPropertyChanged("MedicalResearch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScanRegime_MedicalScanRegime", Storage="_ScanRegime", ThisKey="IdScanRegime", OtherKey="Id", IsForeignKey=true)]
		public ScanRegime ScanRegime
		{
			get
			{
				return this._ScanRegime.Entity;
			}
			set
			{
				ScanRegime previousValue = this._ScanRegime.Entity;
				if (((previousValue != value) 
							|| (this._ScanRegime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScanRegime.Entity = null;
						previousValue.MedicalScanRegimes.Remove(this);
					}
					this._ScanRegime.Entity = value;
					if ((value != null))
					{
						value.MedicalScanRegimes.Add(this);
						this._IdScanRegime = value.Id;
					}
					else
					{
						this._IdScanRegime = default(int);
					}
					this.SendPropertyChanged("ScanRegime");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private System.DateTime _DOB;
		
		private bool _Sex;
		
		private string _Note;
		
		private EntitySet<MedicalResearch> _MedicalResearches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Patient()
		{
			this._MedicalResearches = new EntitySet<MedicalResearch>(new Action<MedicalResearch>(this.attach_MedicalResearches), new Action<MedicalResearch>(this.detach_MedicalResearches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(128)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="DateTime NOT NULL")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(2048)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_MedicalResearch", Storage="_MedicalResearches", ThisKey="Id", OtherKey="IdPatient")]
		public EntitySet<MedicalResearch> MedicalResearches
		{
			get
			{
				return this._MedicalResearches;
			}
			set
			{
				this._MedicalResearches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicalResearches(MedicalResearch entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_MedicalResearches(MedicalResearch entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportSettings")]
	public partial class ReportSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdMedicalResearch;
		
		private string _Name;
		
		private string _Type;
		
		private string _Settings;
		
		private EntityRef<MedicalResearch> _MedicalResearch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdMedicalResearchChanging(int value);
    partial void OnIdMedicalResearchChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnSettingsChanging(string value);
    partial void OnSettingsChanged();
    #endregion
		
		public ReportSetting()
		{
			this._MedicalResearch = default(EntityRef<MedicalResearch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMedicalResearch", DbType="Int NOT NULL")]
		public int IdMedicalResearch
		{
			get
			{
				return this._IdMedicalResearch;
			}
			set
			{
				if ((this._IdMedicalResearch != value))
				{
					if (this._MedicalResearch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMedicalResearchChanging(value);
					this.SendPropertyChanging();
					this._IdMedicalResearch = value;
					this.SendPropertyChanged("IdMedicalResearch");
					this.OnIdMedicalResearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Settings", DbType="NVarChar(MAX)")]
		public string Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				if ((this._Settings != value))
				{
					this.OnSettingsChanging(value);
					this.SendPropertyChanging();
					this._Settings = value;
					this.SendPropertyChanged("Settings");
					this.OnSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalResearch_ReportSetting", Storage="_MedicalResearch", ThisKey="IdMedicalResearch", OtherKey="Id", IsForeignKey=true)]
		public MedicalResearch MedicalResearch
		{
			get
			{
				return this._MedicalResearch.Entity;
			}
			set
			{
				MedicalResearch previousValue = this._MedicalResearch.Entity;
				if (((previousValue != value) 
							|| (this._MedicalResearch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalResearch.Entity = null;
						previousValue.ReportSettings.Remove(this);
					}
					this._MedicalResearch.Entity = value;
					if ((value != null))
					{
						value.ReportSettings.Add(this);
						this._IdMedicalResearch = value.Id;
					}
					else
					{
						this._IdMedicalResearch = default(int);
					}
					this.SendPropertyChanged("MedicalResearch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResearchScope")]
	public partial class ResearchScope : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Order;
		
		private bool _IsSystem;
		
		private EntitySet<MedicalResearchScope> _MedicalResearchScopes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    partial void OnIsSystemChanging(bool value);
    partial void OnIsSystemChanged();
    #endregion
		
		public ResearchScope()
		{
			this._MedicalResearchScopes = new EntitySet<MedicalResearchScope>(new Action<MedicalResearchScope>(this.attach_MedicalResearchScopes), new Action<MedicalResearchScope>(this.detach_MedicalResearchScopes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int")]
		public System.Nullable<int> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystem", DbType="Bit NOT NULL")]
		public bool IsSystem
		{
			get
			{
				return this._IsSystem;
			}
			set
			{
				if ((this._IsSystem != value))
				{
					this.OnIsSystemChanging(value);
					this.SendPropertyChanging();
					this._IsSystem = value;
					this.SendPropertyChanged("IsSystem");
					this.OnIsSystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResearchScope_MedicalResearchScope", Storage="_MedicalResearchScopes", ThisKey="Id", OtherKey="IdResearchScope")]
		public EntitySet<MedicalResearchScope> MedicalResearchScopes
		{
			get
			{
				return this._MedicalResearchScopes;
			}
			set
			{
				this._MedicalResearchScopes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicalResearchScopes(MedicalResearchScope entity)
		{
			this.SendPropertyChanging();
			entity.ResearchScope = this;
		}
		
		private void detach_MedicalResearchScopes(MedicalResearchScope entity)
		{
			this.SendPropertyChanging();
			entity.ResearchScope = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResearchTemplate")]
	public partial class ResearchTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Content;
		
		private System.Nullable<int> _Order;
		
		private bool _IsSystem;
		
		private EntitySet<MedicalResearch> _MedicalResearches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    partial void OnIsSystemChanging(bool value);
    partial void OnIsSystemChanged();
    #endregion
		
		public ResearchTemplate()
		{
			this._MedicalResearches = new EntitySet<MedicalResearch>(new Action<MedicalResearch>(this.attach_MedicalResearches), new Action<MedicalResearch>(this.detach_MedicalResearches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(450) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int")]
		public System.Nullable<int> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystem", DbType="Bit NOT NULL")]
		public bool IsSystem
		{
			get
			{
				return this._IsSystem;
			}
			set
			{
				if ((this._IsSystem != value))
				{
					this.OnIsSystemChanging(value);
					this.SendPropertyChanging();
					this._IsSystem = value;
					this.SendPropertyChanged("IsSystem");
					this.OnIsSystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResearchTemplate_MedicalResearch", Storage="_MedicalResearches", ThisKey="Id", OtherKey="IdResearchTemplate")]
		public EntitySet<MedicalResearch> MedicalResearches
		{
			get
			{
				return this._MedicalResearches;
			}
			set
			{
				this._MedicalResearches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicalResearches(MedicalResearch entity)
		{
			this.SendPropertyChanging();
			entity.ResearchTemplate = this;
		}
		
		private void detach_MedicalResearches(MedicalResearch entity)
		{
			this.SendPropertyChanging();
			entity.ResearchTemplate = null;
		}
	}
}
#pragma warning restore 1591
